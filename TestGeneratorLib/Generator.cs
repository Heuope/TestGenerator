using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;

namespace TestGeneratorLib
{
    public class Generator
    {
        private MethodDeclarationSyntax GenerateMethodContent(MethodDeclarationSyntax method)
        {
            var publicMod = SyntaxFactory.Token(SyntaxKind.PublicKeyword);
            var testAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName("Test"));
            var methodCode = SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");");

            return SyntaxFactory.MethodDeclaration(method.ReturnType, method.Identifier).
                    AddModifiers(publicMod).AddAttributeLists
                    (
                        SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(testAttribute))
                    ).AddBodyStatements(methodCode).AddParameterListParameters(method.ParameterList.Parameters.ToArray());
        }

        private MethodDeclarationSyntax[] GenerateMethods(ClassDeclarationSyntax context)
        {
            var syntaxDeclarations = context.Members.OfType<MethodDeclarationSyntax>();
            return syntaxDeclarations.Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword)).
                Select(publicMethod => GenerateMethodContent(publicMethod)).ToArray();
        }

        private ClassDeclarationSyntax GenerateClass(ClassDeclarationSyntax context)
        {
            var generatedClass = SyntaxFactory.ClassDeclaration(context.Identifier).AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

            return generatedClass.AddMembers(GenerateMethods(context));
        }

        private NamespaceDeclarationSyntax GenerateNamespace(ClassDeclarationSyntax context)
        {
            var ns = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName(context.Identifier));
            return ns.AddMembers(GenerateClass(context));
        }

        private UsingDirectiveSyntax[] GenerateUsings(SyntaxNode root)
        {
            var syntaxDeclarations = root.DescendantNodes().OfType<UsingDirectiveSyntax>();

            return syntaxDeclarations.Append(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("NUnit.Framework"))).ToArray();
        }

        private CompilationUnitSyntax[] GenerateTest(SyntaxNode root)
        {
            var syntaxDeclarations = root.DescendantNodes().OfType<ClassDeclarationSyntax>();

            var syntaxUnit = SyntaxFactory.CompilationUnit();

            return syntaxDeclarations.Select(decl => syntaxUnit.AddUsings(GenerateUsings(root)).AddMembers(GenerateNamespace(decl))).ToArray();
        }

        public List<TestFile> CreateTest(string text)
        {
            SyntaxTree tree = CSharpSyntaxTree.ParseText(text);
            CompilationUnitSyntax root = tree.GetCompilationUnitRoot();

            var files = new List<TestFile>();

            foreach (var item in GenerateTest(root))
            {
                files.Add(new TestFile
                {
                    FileName = item.DescendantNodes().OfType<ClassDeclarationSyntax>().First().Identifier.ValueText,
                    FileCode = item.NormalizeWhitespace().ToFullString()
                });
            }
            return files;
        }
    }
}
